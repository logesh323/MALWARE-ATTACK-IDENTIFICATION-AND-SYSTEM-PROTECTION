from flask import Flask, render_template, flash, request, session
from flask import render_template, redirect, url_for, request
#from wtforms import Form, TextField, TextAreaField, validators, StringField, SubmitField
from werkzeug.utils import secure_filename

import mysql.connector
import smtplib
#from PIL import Image
import pickle
import numpy as np
import pandas as pd
from sklearn import metrics
import warnings
import pickle
warnings.filterwarnings('ignore')
from feature import FeatureExtraction

file = open("pickle/model.pkl","rb")
gbc = pickle.load(file)
file.close()

import numpy as np





app = Flask(__name__)
app.config.from_object(__name__)
app.config['SECRET_KEY'] = '7d441f27d441f27567d441f2b6176a'

app.config['DEBUG']


@app.route("/")
def homepage():
    return render_template('index.html')
@app.route("/Home")
def Home():
    return render_template('index.html')
@app.route("/admin")
def admin():
    return render_template('admin.html')
@app.route("/userregister")
def userregister():
    return render_template('register.html')
@app.route("/userlogin")
def userlogin():
    return render_template('login.html')
@app.route("/searchuser")
def searchuser():

    return render_template('searchuser.html')
@app.route("/userhome")
def userhome():
    uid=session['uid']
    conn = mysql.connector.connect(user='root', password='', host='localhost', database='pwud')
    # cursor = conn.cursor()
    cur = conn.cursor()
    cur.execute("SELECT * FROM register where id='"+str(uid)+"'")
    data = cur.fetchall()
    return render_template('UserHome.html',data=data)
@app.route("/adminhome")
def adminhome():
    return render_template('AdminHome.html')

@app.route("/UploadDataset")
def UploadDataset():
    return render_template('ViewExcel.html')






@app.route("/adminlogin", methods=['GET', 'POST'])
def adminlogin():
    error = None
    if request.method == 'POST':
       if request.form['uname'] == 'admin' or request.form['password'] == 'admin':
           conn = mysql.connector.connect(user='root', password='', host='localhost', database='pwud')
           cursor = conn.cursor()
           cur = conn.cursor()
           cur.execute("SELECT * FROM register")
           data = cur.fetchall()
           return render_template('AdminHome.html', data=data)

       else:
        return render_template('index.html', error=error)


@app.route("/register", methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        n = request.form['name']
        gender = request.form['gender']

        address = request.form['address']

        pnumber = request.form['pnumber']
        email = request.form['email']

        uname = request.form['uname']
        password = request.form['password']
        conn = mysql.connector.connect(user='root', password='', host='localhost', database='pwud')
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO register VALUES ('','" + n + "','" + gender + "','" + address + "','" + email + "','" + pnumber + "','" + uname + "','" + password + "')")
        conn.commit()
        conn.close()
        # return 'file register successfully'
        return render_template('login.html')

@app.route("/login", methods=['GET', 'POST'])
def login():
    error = None
    if request.method == 'POST':
        username = request.form['uname']
        password = request.form['password']
        session['uname'] = request.form['uname']

        conn = mysql.connector.connect(user='root', password='', host='localhost', database='pwud')
        cursor = conn.cursor()
        cursor.execute("SELECT * from register where uname='" + username + "' and password='" + password + "'")
        data = cursor.fetchone()
        if data is None:
            return render_template('index.html')
            return 'Username or Password is wrong'
        else:
            print(data[0])
            session['uid'] = data[0]
            conn = mysql.connector.connect(user='root', password='', host='localhost', database='pwud')
            # cursor = conn.cursor()
            cur = conn.cursor()
            cur.execute("SELECT * FROM register where uname='" + username + "' and password='" + password + "'")
            data = cur.fetchall()

            return render_template('UserHome.html', data=data )

@app.route("/viewuser")
def viewuser():

           conn = mysql.connector.connect(user='root', password='', host='localhost', database='pwud')
           cursor = conn.cursor()
           cur = conn.cursor()
           cur.execute("SELECT * FROM register")
           data = cur.fetchall()
           return render_template('vieuser.html', data=data)
@app.route("/usersearch")
def usersearch():

           conn = mysql.connector.connect(user='root', password='', host='localhost', database='pwud')
           cursor = conn.cursor()
           cur = conn.cursor()
           cur.execute("SELECT * FROM register")
           data = cur.fetchall()
           return render_template('usersearch.html', data=data)

@app.route("/uploaddataset", methods=['GET', 'POST'])
def uploaddataset():
    if request.method == 'POST':


        file = request.files['fileupload']
        file_extension = file.filename.split('.')[1]
        print(file_extension)
        #file.save("static/upload/" + secure_filename(file.filename))

        import pandas as pd
        import matplotlib.pyplot as plt
        df = ''
        if file_extension == 'xlsx':
            df = pd.read_excel(file.read(), engine='openpyxl')
        elif file_extension == 'xls':
            df = pd.read_excel(file.read())
        elif file_extension == 'csv':
            df = pd.read_csv(file)

        print(df)

        import seaborn as sns
        sns.countplot(df['phishing'], label="Count")
        plt.savefig('static/images/out.jpg')
        iimg = 'static/images/out.jpg'





        def clean_dataset(df):
            assert isinstance(df, pd.DataFrame), "df needs to be a pd.DataFrame"
            df.dropna(inplace=True)
            indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).any(1)
            return df[indices_to_keep].astype(np.float64)

        df = clean_dataset(df)

        print("Preprocessing Completed")
        print(df)





        import matplotlib.pyplot as plt


        print("Feature Selection")

        import seaborn as sns
        sns.countplot(df['phishing'], label="Count")
        plt.show()
        df_copy = df.copy(deep=True)
        df_copy[['qty_dot_url', 'qty_hyphen_url', 'qty_underline_url', 'qty_slash_url', 'qty_questionmark_url', 'qty_equal_url', 'qty_at_url', 'qty_and_url', 'qty_exclamation_url']] = df_copy[
            ['qty_dot_url', 'qty_hyphen_url', 'qty_underline_url', 'qty_slash_url', 'qty_questionmark_url', 'qty_equal_url', 'qty_at_url', 'qty_and_url', 'qty_exclamation_url']].replace(0, np.NaN)
        # Model Building
        from sklearn.model_selection import train_test_split
        df.drop(df.columns[np.isnan(df).any()], axis=1)
        X = df.drop(columns='phishing')
        y = df['phishing']
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)

        from sklearn.neural_network import MLPClassifier
        classifier = MLPClassifier(random_state=42)
        classifier.fit(X_train, y_train)

        # Creating a pickle file for the classifier
        filename = 'model.pkl'
        pickle.dump(classifier, open(filename, 'wb'))
        print("Training process is complete Model File Saved!")




        return "Training process is complete Model File Saved!"

@app.route("/userurl", methods=["GET", "POST"])
def index():
    if request.method == "POST":

        url = request.form["url"]
        obj = FeatureExtraction(url)
        x = np.array(obj.getFeaturesList()).reshape(1,30)

        y_pred =gbc.predict(x)[0]
        print(y_pred)
        #1 is safe
        #-1 is unsafe
        y_pro_phishing = gbc.predict_proba(x)[0,0]
        y_pro_non_phishing = gbc.predict_proba(x)[0,1]
        if(y_pred ==1 ):
            pred = "It is {0:.2f} % safe to go ".format(y_pro_phishing*100)
        return render_template('result.html',xx =round(y_pro_non_phishing,2),url=url )

if __name__ == '__main__':
    app.run(debug=True, use_reloader=True)
